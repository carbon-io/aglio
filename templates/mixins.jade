
//
    randomString
    returns a string of a given length comprised by random letters

    @param {number} length - the length of the string
    @returns {string}
- const randomString = length => {
-    const bytes = []
-    for (let i = 0; i < length; ++i)
-        bytes.push(Math.floor(Math.random() * 26) + 97)
-    return String.fromCharCode.apply(String, bytes)
- }

//
    recurseSchemaDescriptors
    returns a descriptor of a carbond schema

    @param {object} schema - the schema to describe
    @returns {object}
- const _ = require('lodash')
- const recurseSchemaDescriptors = schema => {
-   const topLevel = schema.items || schema
-   const properties = topLevel.properties

-   if (!properties)
-       return null

-   const topLevelKeys = Object.keys(_.omitBy(properties, (value, key) => value.noDocument))
-   const descriptor = key => {
-       const element = {
-           name: key,
-           type: properties[key]['type'],
-           description: properties[key]['description'],
-       }

-       if (topLevel.required && topLevel.required.indexOf(key) > -1)
-           element.required = true

-       element.children = recurseSchemaDescriptors(properties[key])

-       return element
-   }

-   return _.map(topLevelKeys, descriptor)
- }

mixin Badge(method)
    //- Draw a badge for a given HTTP method
    case method
        when 'GET'
            span.badge.get: i.fa.fa-arrow-down
        when 'HEAD'
            span.badge.head: i.fa.fa-info-circle
        when 'OPTIONS'
            span.badge.options: i.fa.fa-dot-circle-o
        when 'POST'
            span.badge.post: i.fa.fa-plus
        when 'PUT'
            span.badge.put: i.fa.fa-pencil
        when 'PATCH'
            span.badge.patch: i.fa.fa-pencil
        when 'DELETE'
            span.badge.delete: i.fa.fa-times
        default
            span.badge: i.fa.fa-dot-circle-o

mixin Nav()
    //- Draw a navigation bar, which includes links to individual
    //- resources and actions.
    nav
        if self.api.navItems && self.api.navItems.length
            .resource-group
                .heading
                  .chevron
                    i.open.fa.fa-angle-down
                  a(href='#top') Overview
                .collapse-content
                  ul: each item in self.api.navItems
                    li
                      a(href=item[1])!= item[0]
        each resourceGroup in self.api.resourceGroups || []
            .resource-group
                .heading
                  .chevron
                    i.open.fa.fa-angle-down
                  a(href=resourceGroup.elementLink)!= resourceGroup.name || 'Resource Group'
                .collapse-content
                  ul
                    each item in resourceGroup.navItems || []
                      li
                        a(href=item[1])!= item[0]
                    each resource in resourceGroup.resources || []
                      li
                          if !self.condenseNav || (resource.actions.length != 1)
                              a(href=resource.elementLink)!= resource.name || 'Resource'
                              ul: each action in resource.actions || []
                                  li: a(href=action.elementLink)
                                    +Badge(action.method)
                                    != action.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)
                          else
                              - var action = resource.actions[0]
                              a(href=action.elementLink)
                                  +Badge(action.method)
                                  != action.name || resource.name || action.method + ' ' + (action.attributes && action.attributes.uriTemplate || resource.uriTemplate)
        //- Link to the API hostname, e.g. api.yourcompany.com
        each meta in self.api.metadata || {}
            if meta.name == 'HOST'
                p(style="text-align: center; word-wrap: break-word;")
                    a(href=meta.value)= meta.value

mixin Parameters(params)
    //- Draw a definition list of parameter names, types, defaults,
    //- examples and descriptions.
    .title
        strong URI Parameters
        .collapse-button
            span.close Hide
            span.open Show
    .collapse-content
        dl.inner: each param in params || []
            dt= self.urldec(param.name)
            dd
                code= param.type || 'string'
                | &nbsp;
                if param.required
                    span.required (required)
                else
                    span (optional)
                | &nbsp;
                if param.default
                    span.text-info.default
                        strong Default:&nbsp;
                        span= param.default
                    | &nbsp;
                if param.example
                    span.text-muted.example
                        strong Example:&nbsp;
                        span= param.example
                != self.markdown(param.description)
                if param.values.length
                    p.choices
                        strong Choices:&nbsp;
                        each value in param.values
                            code= self.urldec(value.value)
                            = ' '

mixin RequestResponseSchemaDescriptionBody(description)
    ul
        for property in description
            li
                b #{property.name}
                if !property.required
                    &nbsp;
                    i &#40;optional&#41;
                if property.description
                    span
                        &#58;
                        != self.markdown(property.description)
                if property.children
                    +RequestResponseSchemaDescriptionBody(property.children)

mixin RequestResponseSchemaDescription(schema)
    - const description = recurseSchemaDescriptors(schema)
    
    if description
        +RequestResponseSchemaDescriptionBody(description)

mixin RequestResponse(requestOrResponse, type)
    - const titleCase = string => {
    -     if (!string) return string
    - 
    -     return string.substr(0, 1).toUpperCase() +
    -            string.substr(1).toLowerCase()
    - }

    if requestOrResponse.hasContent || showBlank
        if requestOrResponse.description
            .description!= self.markdown(requestOrResponse.description)

        if Object.keys(requestOrResponse.headers).length
            h5 Headers
            pre: code
                each item, index in requestOrResponse.headers
                    != self.highlight(item.name + ': ' + item.value, 'http')
                    if index < requestOrResponse.headers.length - 1
                        br
            div(style="height: 1px;")
        if requestOrResponse.body
            div(style="width: 50%; display: inline-block; vertical-align: top; padding-right: 4px")
                h5 #{titleCase(type)} Body
                pre: code
                    != self.highlight(requestOrResponse.body, null, ['json', 'yaml', 'xml', 'javascript'])
        if requestOrResponse.schema
            - const schemaFiltered = requestOrResponse.schema.replace(/\r\n?/g, '\n').replace(/\t/g, '    ')
            - const schema = JSON.parse( schemaFiltered )
            div(style="width: 50%; display: inline-block; vertical-align: top; padding-left: 4px")
                h5 Semantics
                div
                    +RequestResponseSchemaDescription(schema)
            div(style="height: 1px;")

mixin Requests(requests)
    - for (let request of requests)
    -   request.id = randomString(16)

    .title
        strong
            if requests.length < 2
                span Request Details
            else
                span Requests
        .collapse-button
            span.close Hide
            span.open  Show

    .collapse-content
        .inner
            if requests.length < 2
                for request, index in requests
                    +RequestResponse(request, 'request')
            else
                ul.nav.nav-tabs(role='tablist')
                    for request, index in requests
                        li.nav-item
                            if index == 0
                                a.nav-link.active(id='#{request.id}-tab',
                                                  data-toggle='tab',
                                                  href='##{request.id}',
                                                  role='tab',
                                                  aria-controls='#{request.id}',
                                                  aria-selected='true')
                                    span Type #{index+1}
                            else
                                a.nav-link(id='#{request.id}-tab',
                                           data-toggle='tab',
                                           href='##{request.id}',
                                           role='tab',
                                           aria-controls='#{request.id}',
                                           aria-selected='false')
                                    span Type #{index+1}

                div.tab-content
                    for request, index in requests
                        if index == 0
                            div.tab-pane.fade.show.active(id='#{request.id}',
                                                          role='tabpanel',
                                                          aria-labelledby='#{request.id}-tab',
                                                          style='padding: 16px')
                                +RequestResponse(request, 'request')
                        else
                            div.tab-pane.fade(id='#{request.id}',
                                              role='tabpanel',
                                              aria-labelledby='#{request.id}-tab',
                                              style='padding: 16px')
                                +RequestResponse(request, 'request')

mixin ResponsesOfCode(responses)

    if responses.length < 2
        div(style='padding: 16px')
            +RequestResponse(responses[0], 'response')
    else
        div(style='padding-top: 16px')
            ul.nav.nav-tabs(role='tablist')
                for response, index in responses
                    li.nav-item
                        if index == 0
                            a.nav-link.active(id='#{response.id}-tab',
                                              data-toggle='tab',
                                              href='##{response.id}',
                                              role='tab',
                                              aria-controls='#{response.id}',
                                              aria-selected='true')
                                span Type #{index+1}
                        else
                            a.nav-link(id='#{response.id}-tab',
                                       data-toggle='tab',
                                       href='##{response.id}',
                                       role='tab',
                                       aria-controls='#{response.id}',
                                       aria-selected='false')
                                span Type #{index+1}

            div.tab-content
                for response, index in responses
                    if index == 0
                        div.tab-pane.fade.show.active(id='#{response.id}',
                                                      role='tabpanel',
                                                      aria-labelledby='#{response.id}-tab',
                                                      style='padding: 16px')
                            +RequestResponse(response, 'response')
                    else
                        div.tab-pane.fade(id='#{response.id}',
                                          role='tabpanel',
                                          aria-labelledby='#{response.id}-tab',
                                          style='padding: 16px')
                            +RequestResponse(response, 'response')

mixin Responses(responses)
    - for (let statusCode in responses)
    -     responses[statusCode] = {
    -         id: randomString(16),
    -         responses: responses[statusCode].map(response => {
    -             response.id = randomString(16)
    -             return response
    -         })
    -     }

    .title
        strong Responses
        .collapse-button
            span.close Hide
            span.open  Show

    .collapse-content
        .inner
            ul.nav.nav-tabs(role='tablist')
                for responsesOfCode, statusCode in responses
                    li.nav-item
                        if statusCode == Object.keys(responses)[0]
                            a.nav-link.active(id='#{responses[statusCode].id}-tab',
                                              data-toggle='tab',
                                              href='##{responses[statusCode].id}',
                                              role='tab',
                                              aria-controls='#{responses[statusCode].id}',
                                              aria-selected='true')
                                span #{statusCode}
                        else
                            a.nav-link(id='#{responses[statusCode].id}-tab',
                                       data-toggle='tab',
                                       href='##{responses[statusCode].id}',
                                       role='tab',
                                       aria-controls='#{responses[statusCode].id}',
                                       aria-selected='false')
                                span #{statusCode}

            div.tab-content
                for responsesOfCode, statusCode in responses
                    if statusCode == Object.keys(responses)[0]
                        div.tab-pane.fade.show.active(id='#{responses[statusCode].id}',
                                                      role='tabpanel',
                                                      aria-labelledby='#{responses[statusCode].id}-tab')
                            +ResponsesOfCode(responsesOfCode.responses)
                    else
                        div.tab-pane.fade(id='#{responses[statusCode].id}',
                                          role='tabpanel',
                                          aria-labelledby='#{responses[statusCode].id}-tab')
                            +ResponsesOfCode(responsesOfCode.responses)


mixin Examples(resourceGroup, resource, action)
    each example in action.examples
        +Requests(example.requests)
        +Responses(example.responses)

mixin Content()
    //- Page header and API description
    header
        h1#top!= self.api.name || 'API Documentation'

    if self.api.descriptionHtml
        != self.api.descriptionHtml

    //- Loop through and display information about all the resource
    //- groups, resources, and actions.
    each resourceGroup in self.api.resourceGroups || []
        section.resource-group(id=resourceGroup.elementId)
            h2.group-heading
                != resourceGroup.name || 'Resource Group'
                = " "
                a.permalink(href=resourceGroup.elementLink) &para;
            if resourceGroup.descriptionHtml
                != resourceGroup.descriptionHtml

            each resource in resourceGroup.resources || []
                .resource(id=resource.elementId)
                    h3.resource-heading
                        != resource.name || ((resource.actions[0] != null) && resource.actions[0].name) || 'Resource'
                        = " "
                        a.permalink(href=resource.elementLink) &nbsp;&para;
                    if resource.description
                        != self.markdown(resource.description)

                    each action in resource.actions || []
                        .action(class=action.methodLower, id=action.elementId)
                            h4.action-heading
                                .name!= action.name
                                a.method(class=action.methodLower, href=action.elementLink)
                                    = action.method
                                code.uri= self.urldec(action.uriTemplate)
                            if action.description
                                != self.markdown(action.description)

                            h4 Example URI
                            .definition
                                span.method(class=action.methodLower)= action.method
                                | &nbsp;
                                span.uri
                                  span.hostname= self.api.host
                                  != action.colorizedUriTemplate

                            //- A list of sub-sections for parameters, requests
                            //- and responses.
                            if action.parameters.length
                                +Parameters(action.parameters)
                            if action.examples
                                +Examples(resourceGroup, resource, action)

mixin ContentTriple()
    .middle
        //- Page header and API description
        header
            h1#top!= self.api.name || 'API Documentation'

    .right
        h5 API Endpoint
        a(href=self.api.host)= self.api.host
    .middle
        if self.api.descriptionHtml
            != self.api.descriptionHtml

    //- Loop through and display information about all the resource
    //- groups, resources, and actions.
    each resourceGroup in self.api.resourceGroups || []
        .middle
            section.resource-group(id=resourceGroup.elementId)
                h2.group-heading
                    != resourceGroup.name || 'Resource Group'
                    = " "
                    a.permalink(href=resourceGroup.elementLink) &para;
                if resourceGroup.descriptionHtml
                    != resourceGroup.descriptionHtml

        each resource in resourceGroup.resources || []
            .middle
                .resource(id=resource.elementId)
                    h3.resource-heading
                        != resource.name || ((resource.actions[0] != null) && resource.actions[0].name) || 'Resource'
                        = " "
                        a.permalink(href=resource.elementLink) &para;
                    if resource.description
                        != self.markdown(resource.description)

            each action in resource.actions || []
                if action.examples
                    .right
                      .definition
                          span.method(class=action.methodLower)= action.method
                          | &nbsp;
                          span.uri
                            span.hostname= self.api.host
                            != action.colorizedUriTemplate
                      .tabs
                          if action.hasRequest
                              .example-names
                                  span Requests
                                  - var requestCount = 0
                                  each example in action.examples
                                      each request in example.requests
                                          - requestCount++
                                          span.tab-button= request.name || 'example ' + requestCount
                              each example in action.examples
                                  each request in example.requests
                                      .tab
                                          +RequestResponseBody(request, false, true)
                                          .tabs
                                              .example-names
                                                  span Responses
                                                  each response in example.responses
                                                      span.tab-button= response.name
                                              each response in example.responses
                                                  .tab
                                                      +RequestResponseBody(response, false, true)
                          else
                            each example in action.examples
                                .tabs
                                    .example-names
                                        span Responses
                                        each response in example.responses
                                            span.tab-button= response.name
                                    each response in example.responses
                                        .tab
                                            +RequestResponseBody(response, false, true)
                .middle
                    .action(class=action.methodLower, id=action.elementId)
                        h4.action-heading
                            .name!= action.name
                            a.method(class=action.methodLower, href=action.elementLink)
                                = action.method
                            code.uri= self.urldec(action.uriTemplate)
                        if action.description
                            != self.markdown(action.description)

                        //- A list of sub-sections for parameters, requests
                        //- and responses.
                        if action.parameters.length
                            +Parameters(action.parameters)

                hr.split
